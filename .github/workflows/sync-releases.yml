name: Sync new releases

on:
  workflow_dispatch:  # Allow manual run
  schedule:
    - cron: "0 6 * * *"  # Every day at 06:00 UTC

concurrency: ${{ github.workflow }}

permissions:
  contents: write
  packages: write
  issues: write

jobs:
  get_releases:
    runs-on: ubuntu-latest
    outputs:
      releases: ${{ steps.releases.outputs.releases }}
    steps:
      - name: Determine releases to package
        id: releases
        run: |
          get_releases() { gh api "repos/${1}/releases?per_page=${2}&page=1" -q '.[].tag_name' | tac; }
          check_release_tag() { gh api "repos/${1}/releases/tags/${2}" >> /dev/null 2>&1; }
          get_unmatched_releases() {
            for release in $(get_releases ${1} ${2})
            do
              if ! check_release_tag ${3} $release
              then
                echo -n "${{ matrix.tag }}, "
              fi
            done
          }
          
          export RELEASES="$(get_unmatched_releases $UPSTREAM $CHECK_N $GITHUB_REPOSITORY)"
          echo "releases=[$RELEASES]" | tee $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}
          UPSTREAM: cli/cli
          CHECK_N: 10
  commit_tag_release:
    runs-on: ubuntu-latest
    needs: [get_releases]
    strategy:
      max-parallel: 1
      fail-fast: false  # Do each release regardless of another succeeds.
      matrix:
        tag: ${{ fromJSON(needs.get_releases.outputs.releases) }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Commit releases
      id: release_tags
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        git fetch --force --tags
        git config user.name 'Release Action'
        git config user.email 'gh-snap-release-action@actions.github.com'
        if [[ $(git tag -l "${{ matrix.tag }}") ]]
        then
          echo "::error::Tag ${{ matrix.tag }} already exists."
          exit 1
        fi
        echo "Setting snapcraft version..."
        sed -i 's/^\(version: \).*$/\1'"${{ matrix.tag }}"'/' snap/snapcraft.yaml
        grep version: snap/snapcraft.yaml
        echo "Updating release files in snapcraft.yaml..."
        echo "::debug::Getting release json..."
        gh api repos/cli/cli/releases/tags/${{ matrix.tag }} -q '.assets.[].browser_download_url|match(".*linux_([a-z0-9]*).tar.gz") | "s!^\\\\(\\\\s*- to " + .captures[0].string + ": \\\\).*$!\\\\1" + .string + "!"' | sed -e 's/386:/i386:/' -e 's/armv6:/armhf:/' | xargs -I{} sed -i -e {} snap/snapcraft.yaml
        echo "Setting up completion..."
        wget -nv -O - $(gh api repos/cli/cli/releases/tags/${{ matrix.tag }} -q '.assets.[].browser_download_url' |grep linux_amd64.tar.gz) | tar zx --wildcards "*bin/gh" -O > gh
        chmod +x gh
        ./gh completion -s bash > completion.sh
        rm gh
        echo "Committing and tagging release ${{ matrix.tag }}..."
        git add completion.sh snap/snapcraft.yaml
        git commit -m "Release version ${{ matrix.tag }}"
        git tag -f ${{ matrix.tag }}
        git push --all --verbose
    - uses: snapcore/action-build@v1
      id: snapcraft
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        name: GitHub CLI $${{ matrix.tag }}
        body: See upstream release at https://github.com/cli/cli/releases/tag/${{ matrix.tag }}
        prerelease: ${{ contains(matrix.tag, 'pre') }}
        tag_name: ${{ matrix.tag }}
        files: "*.snap"
